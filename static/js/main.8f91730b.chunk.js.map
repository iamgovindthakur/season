{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonconfig","Summer","text","iconName","Winter","SeaonDiplay","props","lat","month","season","Latitude","Date","getMonth","className","Spinner","class","message","defaultProps","App","state","lng","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","err","this","Longitude","renderContent","React","Component","ReactDom","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,kBACNC,SAAU,eA0BCE,EAdK,SAAAC,GAClB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMI,UATTF,GASmB,IAAIG,MAAOC,UARxC,GAAKJ,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAGAP,EAAaS,GAAhCP,EAHmB,EAGnBA,KAAMC,EAHa,EAGbA,SAEd,OACE,yBAAKU,UAAS,yBAAoBJ,IAChC,uBAAGI,UAAS,2BAAsBV,EAAtB,WACZ,4BAAKD,GACL,uBAAGW,UAAS,+BAA0BV,EAA1B,aC7BZW,EAAU,SAAAR,GACd,OACE,yBAAKS,MAAM,oBACT,yBAAKA,MAAM,kBAAkBT,EAAMU,WAKzCF,EAAQG,aAAe,CACrBD,QAAS,cAEIF,QCRTI,E,2MAMJC,MAAQ,CAAEZ,IAAK,KAAMa,IAAK,KAAMC,aAAc,I,mFAEzB,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OACN,EAAKC,SAAS,CACZpB,IAAKmB,EAASE,OAAOC,SACrBT,IAAKM,EAASE,OAAOE,eAEzB,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAAEN,aAAcU,EAAIf,e,sCAI3C,OAAIgB,KAAKb,MAAME,cAAiBW,KAAKb,MAAMZ,KAAQyB,KAAKb,MAAMC,KAGzDY,KAAKb,MAAME,cAAgBW,KAAKb,MAAMZ,KAAOyB,KAAKb,MAAMC,IAEzD,kBAAC,EAAD,CAAaV,SAAUsB,KAAKb,MAAMZ,IAAK0B,UAAWD,KAAKb,MAAMC,MAI1D,kBAAC,EAAD,CAASJ,QAAQ,uBARf,uCAAagB,KAAKb,MAAME,gB,+BAYjC,OAAO,6BAAMW,KAAKE,qB,GAhCJC,IAAMC,WAoCxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.8f91730b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SeasonDisplay.css\";\r\n\r\nconst seasonconfig = {\r\n  Summer: {\r\n    text: \"Let's hit the beach!\",\r\n    iconName: \"sun\"\r\n  },\r\n  Winter: {\r\n    text: \"Burr it's chill\",\r\n    iconName: \"snowflake\"\r\n  }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"Summer\" : \"Winter\";\r\n  } else {\r\n    return lat > 0 ? \"Winter\" : \"Summer\";\r\n  }\r\n};\r\n\r\nconst SeaonDiplay = props => {\r\n  const season = getSeason(props.Latitude, new Date().getMonth);\r\n  //const icon= season==='Summer'? 'sun' : 'snowflake'\r\n  const { text, iconName } = seasonconfig[season];\r\n\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`top-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`bottom-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeaonDiplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = props => {\r\n  return (\r\n    <div class=\"ui active dimmer\">\r\n      <div class=\"ui text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: \"Loading...\"\r\n};\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport SeaonDiplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass App extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = { lat: null,lng: null ,errorMessage:''};\r\n\r\n  // }\r\n  state = { lat: null, lng: null, errorMessage: \"\" };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      position =>\r\n        this.setState({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }),\r\n      err => this.setState({ errorMessage: err.message })\r\n    );\r\n  }\r\n  renderContent() {\r\n    if (this.state.errorMessage && !this.state.lat && !this.state.lng) {\r\n      return <div>Error: {this.state.errorMessage}</div>;\r\n    }\r\n    if (!this.state.errorMessage && this.state.lat && this.state.lng) {\r\n      return (\r\n        <SeaonDiplay Latitude={this.state.lat} Longitude={this.state.lng} />\r\n      );\r\n    }\r\n\r\n    return <Spinner message=\"Allow Location....\" />;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.renderContent()}</div>;\r\n  }\r\n}\r\n\r\nReactDom.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}